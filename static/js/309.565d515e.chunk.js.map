{"version":3,"file":"static/js/309.565d515e.chunk.js","mappings":"2VAIaA,GAAsBC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAY,yNACzB,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,MAAMC,gBAAgB,IAMxC,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,OAAOC,MAAM,IAG9CC,EAAYR,EAAAA,EAAAA,IAAU,8TAetBS,GAAqBT,EAAAA,EAAAA,GAAOU,EAAAA,GAAPV,CAAoB,oNAEzC,SAAAE,GAAK,OAAIA,EAAMC,MAAMG,OAAOK,WAAW,IAC5B,SAAAT,GAAK,OAAIA,EAAMC,MAAMG,OAAOM,QAAQ,IACtC,SAAAV,GAAK,OAAIA,EAAMC,MAAMC,MAAMC,gBAAgB,IAIxC,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,OAAOC,MAAM,IAG9CM,EAAab,EAAAA,EAAAA,OAAa,6TAEjB,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,MAAMU,MAAM,IAE/B,SAAAZ,GAAK,OAAIA,EAAMC,MAAMG,OAAOC,MAAM,IAW7CQ,EAAsBf,EAAAA,EAAAA,IAAU,4YAoBhCgB,EAAqBhB,EAAAA,EAAAA,EAAQ,mEAE7B,SAAAE,GAAK,OAAIA,EAAMC,MAAMG,OAAOK,WAAW,IAGvCM,EAAajB,EAAAA,EAAAA,OAAa,0TAElB,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,MAAMU,MAAM,IAE9B,SAAAZ,GAAK,OAAIA,EAAMC,MAAMG,OAAOC,MAAM,IAOpC,SAAAL,GAAK,OAAIA,EAAMC,MAAMG,OAAOM,QAAQ,G,kFCzF7CM,EAAgBlB,EAAAA,EAAAA,QAAc,mKAGxB,SAAAE,GAAK,OAAIA,EAAMC,MAAMG,OAAOa,WAAW,IACrC,SAAAjB,GAAK,OAAIA,EAAMC,MAAMC,MAAMC,gBAAgB,IAInDe,EAAepB,EAAAA,EAAAA,GAAS,qE,SCMrC,EAbgB,SAAH,GAA2B,IAAtBqB,EAAK,EAALA,MAAOC,EAAQ,EAARA,SACrB,OACI,UAACJ,EAAa,WACTG,IAAU,SAACD,EAAY,UAAEC,IACzBC,IAGb,C,oICRaC,E,QAAevB,EAAAA,IAAU,4O,SCoBtC,EAlBe,SAAH,GAAwC,IAAlCwB,EAAY,EAAZA,aAAa,EAAD,EAAEC,QAAAA,OAAO,MAAG,GAAE,EAClCC,GAAWC,EAAAA,EAAAA,MACnB,OACE,SAACJ,EAAY,WACT,mBAAOK,QAASF,EAAS,UACpBD,EAAQI,OAAQ,IAAM,4BAAM,aAAWJ,EAAQK,KAAK,UACrD,kBAAOC,KAAK,OAAOC,KAAK,SAASC,GAAIP,EAAUQ,SAAUV,QAIrE,E,4DCRaW,EAAgB,WACzB,IAAaC,GAAYC,EAAAA,EAAAA,MAAlBC,KACP,GAAuBC,EAAAA,EAAAA,MAAfC,GAAsC,YAA5B,GACZC,GAASd,EAAAA,EAAAA,MACTe,GAAWf,EAAAA,EAAAA,MAEbgB,EAASC,EAAAA,KAAaC,MAAM,CAC5Bb,KAAMY,EAAAA,KAAaE,QACf,yHACA,CACIC,QAAS,yIACTC,oBAAoB,IACrBC,SAAS,YACZC,OAAQN,EAAAA,KAAaE,QACrB,+EACA,CACIC,QAAS,+FACTC,oBAAoB,IACrBC,aAQLE,EAAY,yCAAG,WAAOC,EAAQC,GAAO,4EAC3B,GAAJrB,EAASoB,EAATpB,MAELI,EAASkB,MAAK,SAAAC,GAAO,OAAIA,EAAQvB,OAASA,CAAI,IAAE,CAAC,EAAF,aACV,OAAtCwB,MAAM,GAAD,OAAIxB,EAAI,0BAAyB,0BAEtC,yBAEQQ,EAAWY,GAAQ,KAAD,oDAExBK,QAAQC,IAAI,EAAD,IAAQ,QAGvBL,EAAQM,YAAY,0DACvB,gBAdiB,wCAgBlB,OACI,SAAC,KAAM,CACHC,cAvBQ,CACZ5B,KAAM,GACNkB,OAAQ,IAsBJW,iBAAkBlB,EAClBmB,SAAUX,EAAa,UAEvB,UAAC,KAAmB,YAChB,UAAC,KAAS,YACN,mBAAOvB,QAASa,EAAO,UAAC,QAEpB,SAAC,KAAK,CAACV,KAAK,OAAOE,GAAIQ,EAAQT,KAAK,OAAO+B,YAAY,mBAE3D,SAAC,KAAkB,CAAC/B,KAAK,OAAOgC,UAAU,YAE9C,UAAC,KAAS,YACN,mBAAOpC,QAASc,EAAS,UAAC,UAEtB,SAAC,KAAK,CAACX,KAAK,MAAME,GAAIS,EAAUV,KAAK,SAAS+B,YAAY,2BAE9D,SAAC,KAAkB,CAAC/B,KAAK,SAASgC,UAAU,YAEhD,SAAC,KAAU,CAACjC,KAAK,SAAQ,SAAC,oBAI1C,ECrEakC,EAAgB,SAAH,GAAsB,IAAhB7B,EAAQ,EAARA,SAC5B,GAA0B8B,EAAAA,EAAAA,MAAlBC,GAA4C,YAA/B,GAEfC,EAAmB,yCAAG,WAAOnC,GAAE,+FAEvBkC,EAAclC,GAAI,KAAD,iDAEvBwB,QAAQC,IAAI,EAAD,IAAQ,wDAE1B,gBANwB,sCAOzB,OACI,8BACMtB,EAASP,OAAS,GACf,SAAC,KAAmB,UAEbO,EAASiC,KAAK,gBAAGrC,EAAI,EAAJA,KAAMkB,EAAM,EAANA,OAAQjB,EAAE,EAAFA,GAAE,OAC7B,2BACI,0BAAG,4BAAOD,EAAK,OAAQ,IAAEkB,MACzB,SAAC,KAAU,CAACnB,KAAK,SAASuC,QAAS,kBAAMF,EAAoBnC,EAAG,EAAC,SAAC,aAF7DA,EAGJ,OAKjB,SAAC,KAAkB,UAAC,uBAIpC,ECaA,EAtCiB,WACf,OAA8BsC,EAAAA,EAAAA,UAAS,IAAG,eAAlCC,EAAM,KAAEC,EAAS,KACzB,GAA2CpC,EAAAA,EAAAA,MAA9BD,EAAQ,EAAdE,KAAgBoC,EAAK,EAALA,MAAOC,EAAS,EAATA,UAY9B,OACE,UAAC,IAAS,YACR,SAACC,EAAA,EAAO,CAACvD,MAAM,sCAAqC,UAClD,SAACc,EAAa,MAEfuC,IAAS,yBAAG,mBAAiBA,KAC7BC,IAAa,uBAAG,qBACfA,IACA,iCACE,SAACC,EAAA,EAAO,CAACvD,MAAM,SAAQ,UACrB,SAAC,EAAM,CAACG,aApBS,SAACqD,GAC1BJ,EAAUI,EAAEC,cAAcC,MAC5B,EAkBoDtD,QAAS,CAAC,OAAQ,eAG9D,SAACmD,EAAA,EAAO,CAACvD,MAAM,gBAAe,UAC5B,SAAC4C,EAAa,CAAC7B,SApBG,WAC1B,IAAM4C,EAAmBR,EAAOS,cAEhC,OADyB7C,EAASoC,QAAQ,SAAAjB,GAAO,OAAIA,EAAQvB,KAAKiD,cAAcC,SAASF,IAAqBzB,EAAQL,OAAO+B,cAAcC,SAASF,EAAiB,GAEvK,CAgBmCG,YAOrC,C","sources":["components/PhoneBook/PhoneBook.styled.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/PhoneBook/PhoneBookForm.jsx","components/PhoneBook/PhoneBookList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport { Form, ErrorMessage } from 'formik';\r\n\r\n\r\nexport const PhoneBookFormStyled = styled(Form)`\r\n    border-radius:  ${props => props.theme.radii.cardBorderRadius}px;\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: flex-start;\r\n    border: 1px solid  ${props => props.theme.colors.border};\r\n`;\r\n\r\nexport const FormGroup = styled.div`\r\n    margin-bottom: 10px;\r\n    width: 100%;\r\n    &>label{\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        align-items: flex-start;\r\n        &>input{\r\n            display: inline-block;\r\n\r\n            margin-top: 5px;\r\n        }\r\n    }\r\n`;\r\nexport const ErrorMessageStyled = styled(ErrorMessage)`\r\n    width: 100%;\r\n    color: ${props => props.theme.colors.dangerColor}; \r\n    background-color: ${props => props.theme.colors.dangerBg};\r\n    border-radius:  ${props => props.theme.radii.cardBorderRadius}px;\r\n    margin-top: 5px;\r\n    text-align: center;\r\n    padding: 10px;\r\n    border: 1px solid  ${props => props.theme.colors.border};\r\n`; \r\n\r\nexport const FormButton = styled.button`\r\n    display: inline-block;\r\n    border-radius:  ${props => props.theme.radii.button}px;\r\n    outline: none;\r\n    border: 1px solid ${props => props.theme.colors.border};\r\n    background: cardBgColorDarker;\r\n    padding: 10px 20px;\r\n    margin-top: 20px;\r\n    cursor: pointer;\r\n    transition: opacity 250ms linear;\r\n    &:hover{\r\n        opacity: 0.5;\r\n    }\r\n`;\r\n\r\nexport const PhoneBookListStyled = styled.div`\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    &>li{\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        &:not(:last-child){\r\n            margin-bottom: 10px;\r\n        }\r\n        &>p{\r\n            margin: 0 20px 0 0;\r\n            &>span{\r\n                font-weight: 700;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const PhoneBookListEmpty = styled.p`\r\n    text-align: center;\r\n    color: ${props => props.theme.colors.dangerColor}; \r\n`;\r\n\r\nexport const ListButton = styled.button`\r\n    display: inline-block;\r\n    border-radius: ${props => props.theme.radii.button}px;\r\n    outline: none;\r\n    border: 1px solid ${props => props.theme.colors.border};\r\n    background: cardBgColorDarker;\r\n    padding: 5px 10px;\r\n    cursor: pointer;\r\n    transition: all 250ms linear;\r\n    &:hover{\r\n        opacity: 0.5;\r\n        background: ${props => props.theme.colors.dangerBg};\r\n    }\r\n`;","import styled from '@emotion/styled';\r\n\r\nexport const SectionStyled = styled.section`\r\n    padding: 40px 0;\r\n    margin: 40px auto;\r\n    background:  ${props => props.theme.colors.cardBgColor};\r\n    border-radius: ${props => props.theme.radii.cardBorderRadius}px;\r\n    overflow: hidden;\r\n    padding: 30px;\r\n`;\r\nexport const SectionTitle = styled.h2`\r\n    text-align: center;\r\n    margin-top: 0;\r\n`;","import PropTypes from 'prop-types';\r\nimport { SectionStyled, SectionTitle } from './Section.styled';\r\n\r\nconst Section = ({title, children}) => {\r\n    return(\r\n        <SectionStyled>\r\n            {title && (<SectionTitle>{title}</SectionTitle>)} \r\n            {children}\r\n        </SectionStyled>\r\n    )\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string\r\n};\r\n\r\nexport default Section;","import styled from '@emotion/styled';\r\n\r\nexport const FilterStyled = styled.div`\r\n    &>label{\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n        align-items: flex-start;\r\n        &>input{\r\n            margin-top: 5px;\r\n        }\r\n    }\r\n`;","import { nanoid } from 'nanoid';\r\nimport PropTypes from 'prop-types';\r\nimport { FilterStyled } from './Filter.styled'\r\n\r\nconst Filter = ({ handleChange, options = [] }) => {\r\n    const filterId = nanoid();\r\n  return (\r\n    <FilterStyled>\r\n        <label htmlFor={filterId}>\r\n            {options.length >0 && (<span>Filter by {options.join(\", \")}</span>)}\r\n            <input type=\"text\" name=\"filter\" id={filterId} onChange={handleChange}/>\r\n        </label>\r\n    </FilterStyled>\r\n  )\r\n};\r\n\r\n\r\nFilter.propTypes = {\r\n    options: PropTypes.array,\r\n    handleChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import * as yup from 'yup';\r\nimport { nanoid } from 'nanoid';\r\nimport { Formik, Field } from 'formik';\r\nimport { PhoneBookFormStyled, FormGroup, ErrorMessageStyled, FormButton } from './PhoneBook.styled';\r\nimport { useGetContactsQuery, useAddContactMutation } from 'redux/contacts/contactsApi';\r\n\r\nexport const PhoneBookForm = () => {\r\n    const {data: contacts} = useGetContactsQuery();\r\n    const [ addContact ] = useAddContactMutation();\r\n    const nameId = nanoid(); \r\n    const numberId = nanoid(); \r\n\r\n    let schema = yup.object().shape({\r\n        name: yup.string().matches(\r\n            /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, \r\n            { \r\n                message: 'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d\\'Artagnan',\r\n                excludeEmptyString: true \r\n            }).required('Required'),\r\n            number: yup.string().matches(\r\n            /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/, \r\n            { \r\n                message: 'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\r\n                excludeEmptyString: true \r\n            }).required()\r\n    });\r\n\r\n    const initVal = { \r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\n    const handleSubmit = async (values, actions) => {\r\n        const { name } = values;\r\n        \r\n        if(contacts.find(contact => contact.name === name)){\r\n          alert(`${name} already in contacts!`);\r\n          return ;\r\n        };\r\n        try {\r\n            await addContact(values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        actions.resetForm();\r\n    };\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initVal}\r\n            validationSchema={schema}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <PhoneBookFormStyled>\r\n                <FormGroup>\r\n                    <label htmlFor={nameId}>\r\n                        Name\r\n                        <Field type=\"text\" id={nameId} name=\"name\" placeholder=\"Enter Name\" />\r\n                    </label>\r\n                    <ErrorMessageStyled name=\"name\" component='div'/>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <label htmlFor={numberId}>\r\n                        Number\r\n                        <Field type=\"tel\" id={numberId} name=\"number\" placeholder=\"Enter phone number\" />\r\n                    </label>\r\n                    <ErrorMessageStyled name=\"number\" component='div'/>\r\n                </FormGroup>\r\n                <FormButton type=\"submit\">Add contact</FormButton>\r\n            </PhoneBookFormStyled>\r\n        </Formik>\r\n    )\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { PhoneBookListStyled, PhoneBookListEmpty, ListButton } from './PhoneBook.styled';\r\nimport { useDeleteContactMutation } from 'redux/contacts/contactsApi';\r\n\r\nexport const PhoneBookList = ({ contacts }) => {\r\n    const [ deleteContact ] = useDeleteContactMutation();\r\n\r\n    const handleDeleteContact = async (id) => {\r\n        try {\r\n            await deleteContact(id);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    return(\r\n        <>\r\n            { contacts.length > 0 ? (\r\n                 <PhoneBookListStyled>\r\n                    {\r\n                        contacts.map( ( {name, number, id}) => (\r\n                            <li key={id}>\r\n                                <p><span>{name}:</span> {number}</p> \r\n                                <ListButton type='button' onClick={() => handleDeleteContact(id)}>delete</ListButton>\r\n                            </li>\r\n                        ))\r\n                    }\r\n               </PhoneBookListStyled>\r\n            ) : (\r\n                <PhoneBookListEmpty>Contact not find!</PhoneBookListEmpty>\r\n            )}\r\n        </>\r\n    )\r\n};\r\n\r\nPhoneBookList.propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.exact({\r\n        createdAt: PropTypes.string,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n        id: PropTypes.string.isRequired,\r\n    })).isRequired,\r\n};","import { useState } from 'react'\r\nimport { Container } from 'components/App/App.styled';\r\nimport Section from 'components/Section';\r\nimport Filter from 'components/Filter';\r\nimport { PhoneBookForm, PhoneBookList } from 'components/PhoneBook';\r\nimport { useGetContactsQuery } from 'redux/contacts/contactsApi';\r\n\r\nconst Contacts = () => {\r\n  const [ filter, setFilter ] = useState('');\r\n  const {data: contacts, error, isLoading} = useGetContactsQuery();\r\n\r\n  const handleFilterChange = (e) => {\r\n    setFilter(e.currentTarget.value);\r\n  };\r\n\r\n  const getFilteredContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    const filteredContacts = contacts.filter( contact => contact.name.toLowerCase().includes(normalizedFilter) || contact.number.toLowerCase().includes(normalizedFilter));\r\n    return filteredContacts;\r\n  };\r\n    \r\n  return (\r\n    <Container>\r\n      <Section title=\"Please enter Name of contact person\">\r\n        <PhoneBookForm />\r\n      </Section>\r\n      {error && <p>Error occurred: {error}</p>}\r\n      {isLoading && <p>Please Wait ...</p>}\r\n      {!isLoading && (\r\n        <>\r\n          <Section title=\"Filter\">\r\n            <Filter handleChange={handleFilterChange} options={['name', 'number']}/>\r\n          </Section>\r\n\r\n          <Section title=\"Your contacts\">\r\n            <PhoneBookList contacts={getFilteredContacts()}/>\r\n          </Section>\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n  \r\n}\r\n\r\n\r\nexport default Contacts;"],"names":["PhoneBookFormStyled","styled","Form","props","theme","radii","cardBorderRadius","colors","border","FormGroup","ErrorMessageStyled","ErrorMessage","dangerColor","dangerBg","FormButton","button","PhoneBookListStyled","PhoneBookListEmpty","ListButton","SectionStyled","cardBgColor","SectionTitle","title","children","FilterStyled","handleChange","options","filterId","nanoid","htmlFor","length","join","type","name","id","onChange","PhoneBookForm","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","nameId","numberId","schema","yup","shape","matches","message","excludeEmptyString","required","number","handleSubmit","values","actions","find","contact","alert","console","log","resetForm","initialValues","validationSchema","onSubmit","placeholder","component","PhoneBookList","useDeleteContactMutation","deleteContact","handleDeleteContact","map","onClick","useState","filter","setFilter","error","isLoading","Section","e","currentTarget","value","normalizedFilter","toLowerCase","includes","getFilteredContacts"],"sourceRoot":""}